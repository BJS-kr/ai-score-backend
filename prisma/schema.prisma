// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DB_URL")
}

model Student {
  id          String   @id @default(uuid())
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  submissions Submission[]

  @@map("students")
}

model Submission {
  id            String           @id @default(uuid())
  studentId     String           @map("student_id")
  studentName   String           @map("student_name")
  componentType String           @map("component_type")
  submitText    String           @map("submit_text")
  status        SubmissionStatus @default(PENDING)

  // 완료 시 정보 적재
  score      Int?
  feedback   String? @map("feedback") @db.Text
  highlights Json?   @map("highlights") @db.JsonB

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  student                    Student                     @relation(fields: [studentId], references: [id])
  submissionMedia            SubmissionMedia[]
  submissionLogs             SubmissionLog[]
  submissionExternalCallLogs SubmissionExternalCallLog[]
  revisions                  Revision[]

  @@map("submissions")
}

model SubmissionMedia {
  id           String    @id @default(uuid())
  submissionId String    @map("submission_id")
  mediaType    MediaType @map("media_type")
  fileUrl      String    @map("file_url")
  sasUrl       String    @map("sas_url")
  fileSize     BigInt    @map("file_size")
  createdAt    DateTime  @default(now()) @map("created_at")
  updatedAt    DateTime  @updatedAt @map("updated_at")

  submission Submission @relation(fields: [submissionId], references: [id], onDelete: Cascade)

  @@map("submission_media")
}

model SubmissionLog {
  traceId      String              @id @map("trace_id")
  submissionId String              @map("submission_id")
  requestUri   String              @map("request_uri")
  status       SubmissionLogStatus @default(PENDING)

  // 요청 완료 시 업데이트
  latency Int?

  // 실패 시 실패 시점까지 수집 된 데이터, 성공 시 전체 데이터 적재
  localVideoPath  String? @map("local_video_path")
  localAudioPath  String? @map("local_audio_path")
  videoFileUrl    String? @map("video_file_url")
  videoSasUrl     String? @map("video_sas_url")
  audioFileUrl    String? @map("audio_file_url")
  audioSasUrl     String? @map("audio_sas_url")
  reviewPrompt    String? @map("review_prompt") @db.Text
  reviewResponse  String? @map("review_response") @db.Text
  score           Int?
  feedback        String? @map("feedback") @db.Text
  highlights      Json?   @map("highlights") @db.JsonB
  highlightedText String? @map("highlighted_text") @db.Text

  // 에러 발생 시 적재
  errorMessage String? @map("error_message") @db.Text

  createdAt DateTime @default(now()) @map("created_at")

  submission Submission @relation(fields: [submissionId], references: [id], onDelete: Cascade)

  @@map("submission_logs")
}

model SubmissionExternalCallLog {
  traceId      String   @id @map("trace_id")
  submissionId String   @map("submission_id")
  context      String   @map("context")
  taskName     String   @map("task_name")
  description  String?  @map("description") @db.Text
  requestData  Json?    @map("request_data") @db.JsonB
  responseData Json?    @map("response_data") @db.JsonB
  success      Boolean  @map("success")
  latency      Int      @map("latency")
  errorMessage String?  @map("error_message") @db.Text
  createdAt    DateTime @default(now()) @map("created_at")

  submission Submission @relation(fields: [submissionId], references: [id], onDelete: Cascade)

  @@map("external_call_logs")
}

model Revision {
  id                 String         @id @default(uuid())
  submissionId       String         @map("submission_id")
  status             RevisionStatus @default(PENDING)
  createdAt          DateTime       @default(now()) @map("created_at")

  submission Submission @relation(fields: [submissionId], references: [id], onDelete: Cascade)

  @@map("revisions")
}

model StatsDaily {
  id                    String   @id @default(uuid())
  date                  DateTime @unique @db.Date
  totalSubmissions      Int      @default(0) @map("total_submissions")
  successfulSubmissions Int      @default(0) @map("successful_submissions")
  failedSubmissions     Int      @default(0) @map("failed_submissions")
  pendingSubmissions    Int      @default(0) @map("pending_submissions")
  totalRevisions        Int      @default(0) @map("total_revisions")
  averageScore          Float?   @map("average_score")
  averageLatency        Float?   @map("average_latency")
  createdAt             DateTime @default(now()) @map("created_at")
  updatedAt             DateTime @updatedAt @map("updated_at")

  @@map("stats_daily")
}

model StatsWeekly {
  id                    String   @id @default(uuid())
  weekStart             DateTime @map("week_start") @db.Date
  weekEnd               DateTime @map("week_end") @db.Date
  totalSubmissions      Int      @default(0) @map("total_submissions")
  successfulSubmissions Int      @default(0) @map("successful_submissions")
  failedSubmissions     Int      @default(0) @map("failed_submissions")
  pendingSubmissions    Int      @default(0) @map("pending_submissions")
  totalRevisions        Int      @default(0) @map("total_revisions")
  averageScore          Float?   @map("average_score")
  averageLatency        Float?   @map("average_latency")
  createdAt             DateTime @default(now()) @map("created_at")
  updatedAt             DateTime @updatedAt @map("updated_at")

  @@unique([weekStart, weekEnd])
  @@map("stats_weekly")
}

model StatsMonthly {
  id                    String   @id @default(uuid())
  year                  Int
  month                 Int
  totalSubmissions      Int      @default(0) @map("total_submissions")
  successfulSubmissions Int      @default(0) @map("successful_submissions")
  failedSubmissions     Int      @default(0) @map("failed_submissions")
  pendingSubmissions    Int      @default(0) @map("pending_submissions")
  totalRevisions        Int      @default(0) @map("total_revisions")
  averageScore          Float?   @map("average_score")
  averageLatency        Float?   @map("average_latency")
  createdAt             DateTime @default(now()) @map("created_at")
  updatedAt             DateTime @updatedAt @map("updated_at")

  @@unique([year, month])
  @@map("stats_monthly")
}

enum SubmissionStatus {
  PENDING
  FAILED
  COMPLETED
}

enum MediaType {
  VIDEO
  AUDIO
}

enum SubmissionLogStatus {
  PENDING
  COMPLETED
  FAILED
}

enum RevisionStatus {
PENDING
  FAILED
  COMPLETED
}
